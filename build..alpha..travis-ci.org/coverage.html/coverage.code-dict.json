{"/home/travis/build/npmtest/node-npmtest-koa-passport/test.js":"/* istanbul instrument in package npmtest_koa_passport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-passport/lib.npmtest_koa_passport.js":"/* istanbul instrument in package npmtest_koa_passport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_koa_passport = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_koa_passport = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-passport/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-koa-passport && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_koa_passport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_koa_passport\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_koa_passport.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_koa_passport.rollup.js'] =\n            local.assetsDict['/assets.npmtest_koa_passport.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_koa_passport.__dirname + '/lib.npmtest_koa_passport.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-passport/node_modules/koa-passport/lib/index.js":"'use strict'\n\n// prevent passport from monkey patching\nconst connect = require('passport/lib/framework/connect')\nconnect.__monkeypatchNode = function() {}\n\n// load passport and add the koa framework\nconst passport = require('passport')\nconst Passport = require('passport').Passport\nconst framework = require('./framework/koa')()\n\npassport.framework(framework)\n\nclass KoaPassport extends Passport {\n  constructor() {\n    super()\n    this.framework(framework)\n  }\n}\n\n// Export default singleton.\nmodule.exports = passport\n\n// Expose constructor\nmodule.exports.KoaPassport = KoaPassport\n","/home/travis/build/npmtest/node-npmtest-koa-passport/node_modules/koa-passport/lib/framework/koa.js":"'use strict'\n\n/**\n * Module dependencies.\n */\nconst passport = require('passport')\n\n/**\n * Passport's default/connect middleware.\n */\nconst _initialize   = require('passport/lib/middleware/initialize')\nconst _authenticate = require('passport/lib/middleware/authenticate')\nconst createReqMock = require('./request').create\n\n/**\n * Passport's initialization middleware for Koa.\n *\n * @return {GeneratorFunction}\n * @api private\n */\nfunction initialize(passport) {\n  const middleware = promisify(_initialize(passport))\n  return function passportInitialize(ctx, next) {\n    // koa <-> connect compatibility:\n    const userProperty = passport._userProperty || 'user'\n    // check ctx.req has the userProperty\n    if (!ctx.req.hasOwnProperty(userProperty)) {\n      Object.defineProperty(ctx.req, userProperty, {\n        enumerable: true,\n        get: function() {\n          return ctx.state[userProperty]\n        },\n        set: function(val) {\n          ctx.state[userProperty] = val\n        }\n      })\n    }\n\n    // create mock object for express' req object\n    const req = createReqMock(ctx, userProperty)\n\n\n    // add Promise-based login method\n    const login  = req.login\n    ctx.login = ctx.logIn = function(user, options) {\n      return new Promise((resolve, reject) => {\n        login.call(req, user, options, err => {\n          if (err) reject(err)\n          else resolve()\n        })\n      })\n    }\n\n    // add aliases for passport's request extensions to Koa's context\n    ctx.logout = ctx.logOut = req.logout.bind(req)\n    ctx.isAuthenticated     = req.isAuthenticated.bind(req)\n    ctx.isUnauthenticated   = req.isUnauthenticated.bind(req)\n\n    return middleware(req, ctx).then(function() {\n      return next()\n    })\n  }\n}\n\n/**\n * Passport's authenticate middleware for Koa.\n *\n * @param {String|Array} name\n * @param {Object} options\n * @param {GeneratorFunction} callback\n * @return {GeneratorFunction}\n * @api private\n */\nfunction authenticate(passport, name, options, callback) {\n  // normalize arguments\n  if (typeof options === 'function') {\n    callback = options\n    options  = {}\n  }\n  options = options || {}\n\n  if (callback) {\n    // When the callback is set, neither `next`, `res.redirect` or `res.end`\n    // are called. That is, a workaround to catch the `callback` is required.\n    // The `passportAuthenticate()` method below will therefore set\n    // `callback.resolve` and `callback.reject`. Then, once the authentication\n    // finishes, the modified callback calls the original one and afterwards\n    // triggers either `callback.resolve` or `callback.reject` to inform\n    // `passportAuthenticate()` that we are ready.\n    const _callback = callback\n    callback = function(err, user, info, status) {\n      try {\n        Promise.resolve(_callback(err, user, info, status))\n               .then(() => callback.resolve(false))\n               .catch(err => callback.reject(err))\n      } catch (err) {\n        callback.reject(err)\n      }\n    }\n  }\n\n  const middleware = promisify(_authenticate(passport, name, options, callback))\n\n  return function passportAuthenticate(ctx, next) {\n    // this functions wraps the connect middleware\n    // to catch `next`, `res.redirect` and `res.end` calls\n    const p = new Promise((resolve, reject) => {\n      // mock the `req` object\n      const req = createReqMock(ctx, options.assignProperty || passport._userProperty || 'user')\n\n      // mock the `res` object\n      const res = {\n        redirect: function(url) {\n          ctx.redirect(url)\n          resolve(false)\n        },\n        setHeader: ctx.set.bind(ctx),\n        end: function(content) {\n          if (content) ctx.body = content\n          resolve(false)\n        },\n        set statusCode(status) {\n          ctx.status = status\n        },\n        get statusCode() {\n          return ctx.status\n        }\n      }\n\n      // update the custom callback above\n      if (callback) {\n        callback.resolve = resolve\n        callback.reject  = reject\n      }\n\n      // call the connect middleware\n      middleware(req, res).then(resolve, reject)\n    })\n\n    return p.then(cont => {\n      // cont equals `false` when `res.redirect` or `res.end` got called\n      // in this case, call next to continue through Koa's middleware stack\n      if (cont !== false) {\n        return next()\n      }\n    })\n  }\n}\n\n/**\n * Passport's authorize middleware for Koa.\n *\n * @param {String|Array} name\n * @param {Object} options\n * @param {GeneratorFunction} callback\n * @return {GeneratorFunction}\n * @api private\n */\nfunction authorize(passport, name, options, callback) {\n  options = options || {}\n  options.assignProperty = 'account'\n\n  return authenticate(passport, name, options, callback)\n}\n\n/**\n * Framework support for Koa.\n *\n * This module provides support for using Passport with Koa. It exposes\n * middleware that conform to the `fn*(next)` signature and extends\n * Node's built-in HTTP request object with useful authentication-related\n * functions.\n *\n * @return {Object}\n * @api protected\n */\nmodule.exports = function() {\n  return {\n    initialize:   initialize,\n    authenticate: authenticate,\n    authorize:    authorize\n  }\n}\n\nfunction promisify(expressMiddleware) {\n  return function(req, res) {\n    return new Promise(function(resolve, reject) {\n      expressMiddleware(req, res, function(err, result) {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-koa-passport/node_modules/koa-passport/lib/framework/request.js":"// Koa and Express are fundamental different in how they deal with extensions\n// to the incoming request.\n// Express pollutes Node's IncomingRequest directly, while Koa keeps Node's\n// IncomingRequest untouched and adds is own high-level request object.\n// These both approaches are not directly compatible with each other, since\n// properties/methods found in Express' `req` object are now spread between\n// Koa's context, Koa's request object and the original incoming request.\n// This makes moking the Express `req` object an ugly task. With ES6 we could\n// simply use a Proxy, e.g.:\n//\n// function createReqMock(ctx) {\n//   // Use a proxy that forwards `req` reads to either `ctx.passport`,\n//   // Node's request, Koa's request or Koa's context. Writes are persistet\n//   // into `ctx.passport`.\n//   return Proxy.create(handler(ctx.passport, {\n//     get: function(receiver, key) {\n//       return ctx.passport[key] || ctx.req[key] || ctx.request[key] || ctx[key]\n//     }\n//   }))\n// }\n//\n// However, the current Proxy implementation does not allow debugging.\n// See: https://github.com/rkusa/koa-passport/issues/17\n//\n// Until this is fixed, koa-passport tries to properly delegate every possible\n// used property/method.\n\n'use strict'\n\n// Property/Method names to be delegated\nlet keys = [\n  // passport\n  '_passport',\n  'authInfo',\n\n  // http.IncomingMessage\n  'httpVersion',\n  'headers',\n  'trailers',\n  'setTimeout',\n  'method',\n  'url',\n  'statusCode',\n  'socket',\n  'connection',\n\n  // Koa's context\n  'cookies',\n  'throw',\n\n  // Others. Are not supported directly - require proper plugins/middlewares.\n  'param',\n  'route',\n  'xhr',\n  'baseUrl',\n  'session',\n  'body',\n  'flash'\n]\n\n// remove duplicates\nkeys = keys.filter(function(key, i, self) {\n  return self.indexOf(key) === i\n})\n\n// create a delegate for each key\nconst properties = {\n  // mock express' .get('trust proxy')\n  app: {\n    // getter returning a mock for `req.app` containing\n    // the `.get()` method\n    get: function() {\n      const ctx = this.ctx\n      return {\n        get: function(key) {\n          if (key === 'trust proxy') {\n            return ctx.app.proxy\n          }\n\n          return undefined\n        }\n      }\n    }\n  }\n}\n\nkeys.forEach(function(key) {\n  properties[key] = {\n    get: function() {\n      const obj = getObject(this.ctx, key)\n      if (!obj) return undefined\n\n      // if its a function, call with the proper context\n      if (typeof obj[key] === 'function') {\n        return function() {\n          return obj[key].apply(obj, arguments)\n        }\n      }\n\n      // otherwise, simply return it\n      return obj[key]\n    },\n    set: function(value) {\n      const obj = getObject(this.ctx, key) || this.ctx.state\n      obj[key] = value\n    }\n  }\n})\n\n// test where the key is available, either in `ctx.state`, Node's request,\n// Koa's request or Koa's context\nfunction getObject(ctx, key) {\n  if (ctx.state && (key in ctx.state)) {\n    return ctx.state\n  }\n\n  if (key in ctx.request) {\n    return ctx.request\n  }\n\n  if (key in ctx.req) {\n    return ctx.req\n  }\n\n  if (key in ctx) {\n    return ctx\n  }\n\n  return undefined\n}\n\nconst IncomingMessageExt = require('passport/lib/http/request')\n\nexports.create = function(ctx, userProperty) {\n  const req = Object.create(ctx.request, properties)\n\n  Object.defineProperty(req, userProperty, {\n    enumerable: true,\n    get: function() {\n      return ctx.state[userProperty]\n    },\n    set: function(val) {\n      ctx.state[userProperty] = val\n    }\n  })\n\n  // add passport http.IncomingMessage extensions\n  req.login = IncomingMessageExt.logIn\n  req.logIn = IncomingMessageExt.logIn\n  req.logout = IncomingMessageExt.logOut\n  req.logOut = IncomingMessageExt.logOut\n  req.isAuthenticated = IncomingMessageExt.isAuthenticated\n  req.isUnauthenticated = IncomingMessageExt.isUnauthenticated\n\n  return req\n}"}